{"version":3,"sources":["Components/Gameboards/Ship/Ship.js","Components/Header/MoveShip/MoveShip.js","Components/Header/Header.js","Components/Gameboards/Board/Board.js","Components/Constants/Constants.js","Components/Gameboards/Cell/Cell.js","Components/Gameboards/Gameboard/Gameboard.js","Components/Gameboards/Gameboards.js","Components/Footer/Footer.js","Game/Ship/Ship.js","Game/utils.js","Game/Gameboard/Gameboard.js","Game/Constants/Constants.js","Game/Player/Player.js","Game/Player/Computer.js","Components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["ShipBlock","styled","div","props","showcase","orientation","length","boardDimensions","startGame","isCurrentShip","Ship","onClick","setCurrentShip","Option","Select","Title","Typography","MoveShip","column","row","currentShip","startCoordinate","col","direction","level","layout","Item","label","value","style","width","onChange","moveShip","checked","toggleShip","Header","playButtons","type","size","setStartGame","randomiseShips","restartButton","playAgain","infoPlayerWins","TrophyTwoTone","fontSize","marginBottom","infoComputerWins","DislikeTwoTone","justify","align","winner","StyledBoardWrapper","StyledNumbersColumn","StyledLettersColumn","StyledCell","Board","children","cellDimensions","computer","ClickedCell","sunk","StyledEmptyHit","Cell","result","clicked","hit","StyledGameboard","Gameboard","cells","gameboard","map","rowIndex","colIndex","shipIndexOnCell","shipCell","emptyCell","key","uuidv4","handleClick","shipStartsOnCell","ships","find","ship","findIndex","coordinates","getCoordinates","currentShipIndex","Gameboards","player","attackComputer","Paragraph","Footer","Layout","GameFooter","textAlign","href","target","rel","shipLength","this","hitCount","coords","Array","_","index","getRandomInt","min","max","Math","ceil","floor","random","getSurroundingCoords","validCoordinate","validCoordinates","every","noShipExists","coord","some","otherShip","otherCoord","surroundingShipExists","allOtherShips","shipIndex","filter","board","cell","push","quantity","forEach","i","newShip","placeShip","intialiseShips","newStartCoord","newCoords","otherShips","toggleOrientation","attackCoords","curShip","shipCoord","isSunk","updateBoardSunkShip","Player","enemy","receiveAttack","emptyCoordinate","getComputerCoordinate","hitShipArray","surroundingCoords","emptySurroundingCoords","getSurroundingEmptyCoordinate","emptyCoordinates","reduce","accumulatorArray","rowArray","getRandomCoordinate","Computer","require","StyledWrapper","Game","useState","setGameboard","setShips","setCurrentShipIndex","attackGameboard","setAttackGameboard","start","setStart","playerTurn","setPlayerTurn","setWinner","initialiseGame","getGameboard","getShips","handleSetCurrentShip","handleComputerAttack","attack","updatedGameboard","cloneDeep","gameover","useEffect","message","warning","updatedShips","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.a8ef02a9.chunk.js","sourcesContent":["import React from 'react';\nimport styled from 'styled-components';\nimport { boardDimensions } from '../../Constants/Constants';\n\nconst ShipBlock = styled.div`\n  position: ${[(props) => (props.showcase ? 'relative' : 'absolute')]};\n  cursor: pointer;\n  z-index: 100;\n  left: 0%;\n  top: 0%;\n  right: 0%;\n  bottom: 0%;\n  width: ${(props) =>\n    props.orientation\n      ? (boardDimensions / 10) * (props.length * 0.95) + 'px'\n      : boardDimensions / 10 + 'px'};\n  height: ${(props) =>\n    !props.orientation\n      ? (boardDimensions / 10) * (props.length * 0.95) + 'px'\n      : boardDimensions / 10 + 'px'};\n  border: 1px solid hsla(224, 100%, 63.84%, 1);\n  background-color: ${(props) =>\n    !props.startGame && props.isCurrentShip\n      ? 'hsla(280, 100%, 66.74%, 0.60)'\n      : 'hsla(228, 100%, 66.74%, 0.22)'};\n`;\n\nconst Ship = (props) => {\n  return <ShipBlock {...props} onClick={props.setCurrentShip} />;\n};\n\nexport default Ship;\n","import React from 'react';\nimport { Form, Card, Select, Switch, Typography, Space } from 'antd';\nimport Ship from '../../Gameboards/Ship/Ship';\n\nconst { Option } = Select;\nconst { Title } = Typography;\n\nconst MoveShip = (props) => {\n  let column;\n  let row;\n  let length;\n  let orientation;\n\n  if (props.currentShip) {\n    column = props.currentShip.startCoordinate.col;\n    row = props.currentShip.startCoordinate.row;\n    length = props.currentShip.length;\n    orientation = props.currentShip.orientation;\n  }\n\n  return (\n    <Card>\n      <Space direction=\"vertical\">\n        <Title level={5}>\n          Click on a ship to change the starting coordinate\n        </Title>\n        <Form layout=\"inline\">\n          <Form.Item label=\"Ship\">\n            <Ship length={length} orientation={orientation} showcase />\n          </Form.Item>\n          <Form.Item label=\"Column\">\n            <Select\n              value={column}\n              style={{ width: 60 }}\n              onChange={(value) => props.moveShip(row, value)}\n            >\n              <Option value={0}>A</Option>\n              <Option value={1}>B</Option>\n              <Option value={2}>C</Option>\n              <Option value={3}>D</Option>\n              <Option value={4}>E</Option>\n              <Option value={5}>F</Option>\n              <Option value={6}>G</Option>\n              <Option value={7}>H</Option>\n              <Option value={8}>I</Option>\n              <Option value={9}>J</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Row\">\n            <Select\n              value={row}\n              style={{ width: 60 }}\n              onChange={(value) => props.moveShip(value, column)}\n            >\n              <Option value={0}>1</Option>\n              <Option value={1}>2</Option>\n              <Option value={2}>3</Option>\n              <Option value={3}>4</Option>\n              <Option value={4}>5</Option>\n              <Option value={5}>6</Option>\n              <Option value={6}>7</Option>\n              <Option value={7}>8</Option>\n              <Option value={8}>9</Option>\n              <Option value={9}>10</Option>\n            </Select>\n          </Form.Item>\n          <Form.Item label=\"Horizontal\">\n            <Switch checked={orientation} onChange={props.toggleShip} />\n          </Form.Item>\n        </Form>\n      </Space>\n    </Card>\n  );\n};\n\nexport default MoveShip;\n","import React from 'react';\nimport { Button, Space, Typography, Row } from 'antd';\nimport { TrophyTwoTone, DislikeTwoTone } from '@ant-design/icons';\nimport MoveShip from './MoveShip/MoveShip';\n\nconst { Title } = Typography;\n\nconst Header = (props) => {\n  const playButtons = (\n    <Space>\n      <Button type=\"primary\" size=\"large\" onClick={props.setStartGame}>\n        Play Game\n      </Button>\n      <Button type=\"ghost\" size=\"large\" onClick={props.randomiseShips}>\n        Randomise Ships\n      </Button>\n    </Space>\n  );\n\n  const restartButton = (\n    <Button type=\"primary\" size=\"large\" onClick={() => props.playAgain()}>\n      Restart\n    </Button>\n  );\n\n  const infoPlayerWins = (\n    <Space>\n      <TrophyTwoTone\n        style={{\n          fontSize: '1.6em',\n          marginBottom: '6px',\n        }}\n      />\n      <Title level={5}>You win!</Title>\n    </Space>\n  );\n\n  const infoComputerWins = (\n    <Space>\n      <DislikeTwoTone\n        style={{\n          fontSize: '1.6em',\n          marginBottom: '6px',\n        }}\n      />\n      <Title level={5}>You lost</Title>\n    </Space>\n  );\n\n  return (\n    <Row justify=\"center\">\n      <Space direction=\"vertical\" size=\"large\" align=\"center\">\n        <Title level={1}>Battleship</Title>\n        {props.winner === 'player' ? infoPlayerWins : null}\n        {props.winner === 'computer' ? infoComputerWins : null}\n        {props.startGame ? restartButton : playButtons}\n        {props.startGame ? null : (\n          <MoveShip\n            currentShip={props.currentShip}\n            toggleShip={props.toggleShip}\n            moveShip={props.moveShip}\n          />\n        )}\n      </Space>\n    </Row>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport { boardDimensions, cellDimensions } from '../../Constants/Constants';\nimport styled from 'styled-components';\nimport propTypes from 'prop-types';\n\nconst StyledBoardWrapper = styled.div`\n  display: grid;\n  width: ${boardDimensions}px;\n  grid-template: ${cellDimensions}px 1fr / ${cellDimensions}px 1fr;\n  opacity: ${(props) => (props.startGame ? '100%' : '50%')};\n`;\n\nconst StyledNumbersColumn = styled.div`\n  display: grid;\n  grid-template-rows: repeat(10, 1fr);\n  grid-column: 1;\n  grid-row: 2;\n`;\n\nconst StyledLettersColumn = styled.div`\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-column: 2;\n`;\n\nconst StyledCell = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 12px;\n`;\n\nconst Board = (props) => (\n  <StyledBoardWrapper startGame={props.startGame}>\n    <StyledLettersColumn>\n      <StyledCell>A</StyledCell>\n      <StyledCell>B</StyledCell>\n      <StyledCell>C</StyledCell>\n      <StyledCell>D</StyledCell>\n      <StyledCell>E</StyledCell>\n      <StyledCell>F</StyledCell>\n      <StyledCell>G</StyledCell>\n      <StyledCell>H</StyledCell>\n      <StyledCell>I</StyledCell>\n      <StyledCell>J</StyledCell>\n    </StyledLettersColumn>\n    <StyledNumbersColumn>\n      <StyledCell>1</StyledCell>\n      <StyledCell>2</StyledCell>\n      <StyledCell>3</StyledCell>\n      <StyledCell>4</StyledCell>\n      <StyledCell>5</StyledCell>\n      <StyledCell>6</StyledCell>\n      <StyledCell>7</StyledCell>\n      <StyledCell>8</StyledCell>\n      <StyledCell>9</StyledCell>\n      <StyledCell>10</StyledCell>\n    </StyledNumbersColumn>\n    {props.children}\n  </StyledBoardWrapper>\n);\n\nBoard.propTypes = {\n  children: propTypes.element.isRequired,\n};\n\nexport default Board;\n","export const backgroundColour = 'black';\nexport const borderColour = '#303030';\nexport const boardDimensions = 340;\nexport const cellDimensions = boardDimensions / 10;\n","import React from 'react';\nimport { cellDimensions, backgroundColour } from '../../Constants/Constants';\nimport styled from 'styled-components';\n\nconst StyledCell = styled.div`\n  position: relative;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: ${cellDimensions - 2}px;\n  width: ${cellDimensions - 2}px;\n  background-color: ${backgroundColour};\n  :hover {\n    border: ${(props) =>\n      props.startGame && props.computer ? '2px solid green;' : null};\n    background-color: ${(props) =>\n      props.startGame && props.computer ? 'rgba(51, 170, 51, 0.2)' : null};\n    cursor: ${(props) =>\n      props.startGame && props.computer ? 'pointer' : null};\n  }\n`;\n\nconst ClickedCell = styled(StyledCell)`\n  font-size: ${cellDimensions}px;\n  line-height: 0px;\n  color: indianred;\n  cursor: default;\n  background-color: ${(props) =>\n    props.sunk ? 'indianred' : 'rgb(211, 211, 211, 0.02)'};\n`;\n\nconst StyledEmptyHit = styled.div`\n  margin-bottom: 0.6em;\n`;\n\nconst Cell = (props) => {\n  let result = (\n    <StyledCell\n      computer={props.computer}\n      onClick={props.startGame ? props.clicked : null}\n      startGame={props.startGame}\n    >\n      {props.children}\n    </StyledCell>\n  );\n  if (props.hit === 'MISS') {\n    result = (\n      <ClickedCell>\n        <StyledEmptyHit>.{props.children}</StyledEmptyHit>\n      </ClickedCell>\n    );\n  }\n  if (props.hit === 'HIT') {\n    result = <ClickedCell>X{props.children}</ClickedCell>;\n  }\n  if (props.hit === 'SUNK') {\n    result = <ClickedCell sunk>{props.children}</ClickedCell>;\n  }\n  return result;\n};\n\nexport default Cell;\n","import React from 'react';\nimport Cell from '../Cell/Cell';\nimport Ship from '../Ship/Ship';\nimport { v4 as uuidv4 } from 'uuid';\nimport { borderColour } from '../../Constants/Constants';\nimport styled from 'styled-components';\n\nconst StyledGameboard = styled.div`\n  position: relative;\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  grid-template-rows: repeat(10, 1fr);\n  grid-gap: 1px;\n  background-color: ${borderColour};\n  border: 1px solid ${borderColour};\n`;\n\nconst Gameboard = (props) => {\n  const cells = props.gameboard.map((row, rowIndex) =>\n    row.map((col, colIndex) => {\n      const emptyCell = (\n        <Cell\n          hit={col}\n          key={uuidv4()}\n          computer={props.computer}\n          startGame={props.startGame}\n          clicked={\n            props.computer && props.winner === false\n              ? () => props.handleClick(rowIndex, colIndex)\n              : null\n          }\n        />\n      );\n\n      let shipStartsOnCell = false;\n      let shipIndexOnCell;\n      let shipCell;\n\n      if (props.ships) {\n        shipStartsOnCell = props.ships.find(\n          (ship) =>\n            ship.startCoordinate.row === rowIndex &&\n            ship.startCoordinate.col === colIndex\n        );\n        if (shipStartsOnCell) {\n          shipIndexOnCell = props.ships.findIndex(\n            (ship) =>\n              ship.startCoordinate.row === rowIndex &&\n              ship.startCoordinate.col === colIndex\n          );\n          shipCell = (\n            <Cell key={uuidv4()} hit={col} startGame={props.startGame}>\n              <Ship\n                orientation={shipStartsOnCell.orientation}\n                length={shipStartsOnCell.length}\n                coordinates={shipStartsOnCell.getCoordinates()}\n                isCurrentShip={shipIndexOnCell === props.currentShipIndex}\n                setCurrentShip={() => props.setCurrentShip(shipIndexOnCell)}\n                startGame={props.startGame}\n              />\n            </Cell>\n          );\n        }\n      }\n\n      return shipStartsOnCell ? shipCell : emptyCell;\n    })\n  );\n\n  return <StyledGameboard>{cells}</StyledGameboard>;\n};\n\nexport default Gameboard;\n","import React from 'react';\nimport { Space, Row } from 'antd';\nimport Board from './Board/Board';\nimport Gameboard from './Gameboard/Gameboard';\n\nconst Gameboards = (props) => {\n  return (\n    <Row justify=\"center\">\n      <Space size={50} align=\"center\">\n        <Board startGame={true}>\n          <Gameboard\n            gameboard={props.player}\n            ships={props.ships}\n            currentShipIndex={props.currentShipIndex}\n            setCurrentShip={props.setCurrentShip}\n            startGame={props.startGame}\n          />\n        </Board>\n        <Board startGame={props.startGame}>\n          <Gameboard\n            gameboard={props.computer}\n            handleClick={props.attackComputer}\n            startGame={props.startGame}\n            winner={props.winner}\n            computer\n          />\n        </Board>\n      </Space>\n    </Row>\n  );\n};\n\nexport default Gameboards;\n","import React from 'react';\nimport { Layout, Typography } from 'antd';\n\nconst { Paragraph } = Typography;\nconst { Footer } = Layout;\n\nconst GameFooter = () => (\n  <Footer style={{ textAlign: 'center' }}>\n    <Paragraph>\n      Created by{' '}\n      <a\n        href=\"https://github.com/timkellytk\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Tim Kelly\n      </a>{' '}\n      for The Odin Project\n    </Paragraph>\n  </Footer>\n);\n\nexport default GameFooter;\n","class Ship {\n  constructor(row, col, shipLength = 1, orientation = true) {\n    this.length = shipLength;\n    this.hitCount = 0;\n    this.startCoordinate = { row, col };\n    this.orientation = orientation;\n  }\n  toggleOrientation() {\n    this.orientation = !this.orientation;\n  }\n  getCoordinates(\n    startCoordinate = this.startCoordinate,\n    orientation = this.orientation\n  ) {\n    const { row, col } = startCoordinate;\n    const coords = [...Array(this.length)];\n    return coords.map((_, index) =>\n      orientation ? { row, col: col + index } : { row: row + index, col }\n    );\n  }\n  hit() {\n    this.hitCount += 1;\n  }\n  isSunk() {\n    return this.length === this.hitCount;\n  }\n}\n\nexport default Ship;\n","// From Stack Overflow https://stackoverflow.com/questions/1527803/generating-random-whole-numbers-in-javascript-in-a-specific-range\n\nexport const getRandomInt = (min, max) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nexport const getRandomBool = () => Math.random() >= 0.5;\n\nexport const getSurroundingCoords = ({ row, col }) => {\n  return [\n    { row: row - 1, col: col - 1 },\n    { row: row - 1, col },\n    { row: row - 1, col: col + 1 },\n    { row, col: col - 1 },\n    { row, col },\n    { row, col: col + 1 },\n    { row: row + 1, col: col - 1 },\n    { row: row + 1, col },\n    { row: row + 1, col: col + 1 },\n  ];\n};\n\nexport const validCoordinate = (row, col) =>\n  row >= 0 && row <= 9 && col >= 0 && col <= 9;\n","import Ship from '../Ship/Ship';\nimport { BOARD_SIZE } from '../Constants/Constants';\nimport {\n  getRandomInt,\n  getRandomBool,\n  validCoordinate,\n  getSurroundingCoords,\n} from '../utils';\n\nconst validCoordinates = (coords) =>\n  coords.every(({ row, col }) => {\n    return row >= 0 && row <= 9 && col >= 0 && col <= 9;\n  });\n\nconst noShipExists = (coords, ships) =>\n  coords.every((coord) => {\n    const existingShipsGameboard = ships.some((otherShip) => {\n      return otherShip.getCoordinates().some((otherCoord) => {\n        return surroundingShipExists(coord, otherCoord);\n      });\n    });\n    return !existingShipsGameboard;\n  });\n\nconst surroundingShipExists = (coord, otherCoord) => {\n  return getSurroundingCoords(coord).some(\n    ({ row, col }) => row === otherCoord.row && col === otherCoord.col\n  );\n};\n\nconst allOtherShips = (ships, shipIndex) =>\n  ships.filter((_, index) => index !== shipIndex);\n\nconst findShip = (ships, attackCoords) =>\n  ships.find((curShip) => {\n    const shipExistsAtCoords = curShip\n      .getCoordinates()\n      .some(\n        (shipCoord) =>\n          shipCoord.row === attackCoords.row &&\n          shipCoord.col === attackCoords.col\n      );\n    return shipExistsAtCoords;\n  });\n\nconst updateBoardSunkShip = (row, col, board) => {\n  board[row][col] = 'SUNK';\n  const surroundingCoords = getSurroundingCoords({ row, col });\n  surroundingCoords.forEach(({ row, col }) => {\n    if (\n      validCoordinate(row, col) &&\n      board[row][col] !== 'SUNK' &&\n      board[row][col] !== 'HIT'\n    ) {\n      board[row][col] = 'MISS';\n    }\n  });\n};\n\nclass Gameboard {\n  constructor() {\n    this.board = [...Array(BOARD_SIZE)].map((row) =>\n      [...Array(BOARD_SIZE)].map((cell) => '')\n    );\n    this.ships = [];\n  }\n  getGameboard() {\n    return this.board;\n  }\n  getShips() {\n    return this.ships;\n  }\n  placeShip(ship) {\n    const coords = ship.getCoordinates();\n\n    if (validCoordinates(coords) && noShipExists(coords, this.ships)) {\n      this.ships.push(ship);\n      return true;\n    }\n    return false;\n  }\n  intialiseShips() {\n    const shipsRequired = [\n      { quantity: 4, size: 1 },\n      { quantity: 3, size: 2 },\n      { quantity: 2, size: 3 },\n      { quantity: 1, size: 4 },\n    ];\n\n    shipsRequired.forEach(({ quantity, size }) => {\n      let i = 0;\n      while (i < quantity) {\n        const newShip = new Ship(\n          getRandomInt(0, 9),\n          getRandomInt(0, 9),\n          size,\n          getRandomBool()\n        );\n        const shipPlaced = this.placeShip(newShip);\n        if (shipPlaced) {\n          i += 1;\n        }\n      }\n    });\n  }\n  randomiseShips() {\n    this.ships = [];\n    this.intialiseShips();\n  }\n  moveShip(row, col, shipIndex) {\n    const ship = this.ships[shipIndex];\n    const newStartCoord = { row, col };\n    const newCoords = ship.getCoordinates(newStartCoord);\n    const otherShips = allOtherShips(this.ships, shipIndex);\n\n    if (validCoordinates(newCoords) && noShipExists(newCoords, otherShips)) {\n      ship.startCoordinate = newStartCoord;\n      return true;\n    }\n    return false;\n  }\n  toggleShip(shipIndex) {\n    const ship = this.ships[shipIndex];\n    const newCoords = ship.getCoordinates(\n      ship.startCoordinate,\n      !ship.orientation\n    );\n    const otherShips = allOtherShips(this.ships, shipIndex);\n\n    if (validCoordinates(newCoords) && noShipExists(newCoords, otherShips)) {\n      ship.toggleOrientation();\n      return true;\n    }\n    return false;\n  }\n  receiveAttack(row, col) {\n    const ship = findShip(this.ships, { row, col });\n\n    if (ship) {\n      ship.hit();\n      if (ship.isSunk()) {\n        ship.getCoordinates().forEach(({ row, col }) => {\n          updateBoardSunkShip(row, col, this.board);\n        });\n        return 'SUNK';\n      }\n      this.board[row][col] = 'HIT';\n      return 'HIT';\n    }\n\n    this.board[row][col] = 'MISS';\n    return 'MISS';\n  }\n  gameover() {\n    const result = this.ships.every((ship) => ship.isSunk());\n    return result;\n  }\n}\n\nexport default Gameboard;\n","export const BOARD_SIZE = 10;\n","import Gameboard from '../Gameboard/Gameboard';\n\nclass Player {\n  constructor() {\n    this.gameboard = new Gameboard();\n  }\n  attack(col, row, enemy) {\n    return enemy.gameboard.receiveAttack(col, row);\n  }\n}\n\nexport default Player;\n","import Player from './Player';\nimport { getRandomInt, getSurroundingCoords, validCoordinate } from '../utils';\n\nconst getRandomCoordinate = (gameboard) => {\n  const emptyCoordinates = gameboard.board.reduce(\n    (accumulatorArray, row, rowIndex) => {\n      const rowArray = row\n        .map((_, colIndex) => {\n          return {\n            row: rowIndex,\n            col: colIndex,\n          };\n        })\n        .filter((cell) => {\n          return gameboard.board[cell.row][cell.col] === '';\n        });\n      return [...accumulatorArray, ...rowArray];\n    },\n    []\n  );\n  const randomIndex = getRandomInt(0, emptyCoordinates.length - 1);\n  const { row, col } = emptyCoordinates[randomIndex];\n  return { row, col };\n};\n\nconst emptyCoordinate = (row, col, gameboard) =>\n  gameboard[row][col] !== 'MISS' && gameboard[row][col] !== 'HIT';\n\nconst getSurroundingEmptyCoordinate = (hitShipArray, gameboard) => {\n  for (let i = 0; i < hitShipArray.length; i++) {\n    const surroundingCoords = getSurroundingCoords(hitShipArray[i]);\n    const anyCellAvailable = surroundingCoords.some(\n      ({ row, col }) =>\n        validCoordinate(row, col) && emptyCoordinate(row, col, gameboard)\n    );\n    if (anyCellAvailable) {\n      const emptySurroundingCoords = surroundingCoords.filter(\n        ({ row, col }) =>\n          validCoordinate(row, col) && emptyCoordinate(row, col, gameboard)\n      );\n      const randomIndex = getRandomInt(0, emptySurroundingCoords.length - 1);\n      const { row, col } = emptySurroundingCoords[randomIndex];\n      return {\n        row,\n        col,\n      };\n    }\n  }\n};\n\nconst getComputerCoordinate = (gameboard) => {\n  if (hitShipArray.length > 0) {\n    return getSurroundingEmptyCoordinate(hitShipArray, gameboard.board);\n  }\n  return getRandomCoordinate(gameboard);\n};\n\nlet hitShipArray = [];\n\nclass Computer extends Player {\n  attack(enemy) {\n    const { row, col } = getComputerCoordinate(enemy.gameboard);\n    const result = enemy.gameboard.receiveAttack(row, col);\n    if (result === 'HIT') {\n      hitShipArray.push({ row, col });\n    }\n    if (result === 'SUNK') {\n      hitShipArray = [];\n    }\n    return result;\n  }\n}\n\nexport default Computer;\n","import React, { useState, useEffect } from 'react';\nimport { Space, Layout, message } from 'antd';\nimport Header from '../Header/Header';\nimport Gameboards from '../Gameboards/Gameboards';\nimport Footer from '../Footer/Footer';\nimport styled from 'styled-components';\nimport Player from '../../Game/Player/Player';\nimport Computer from '../../Game/Player/Computer';\nconst _ = require('lodash');\n\nconst StyledWrapper = styled.div`\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 60px;\n`;\n\n// Game logic\nlet player;\nlet computer;\n\nconst Game = () => {\n  const [gameboard, setGameboard] = useState([]);\n  const [ships, setShips] = useState([]);\n  const [currentShip, setCurrentShip] = useState(null);\n  const [currentShipIndex, setCurrentShipIndex] = useState(null);\n  const [attackGameboard, setAttackGameboard] = useState([]);\n  const [start, setStart] = useState(false);\n  const [playerTurn, setPlayerTurn] = useState(true);\n  const [winner, setWinner] = useState(false);\n\n  const initialiseGame = () => {\n    player = new Player();\n    player.gameboard.intialiseShips();\n    setGameboard(player.gameboard.getGameboard());\n    setShips(player.gameboard.getShips());\n    setCurrentShip(player.gameboard.getShips()[0]);\n    setCurrentShipIndex(0);\n\n    computer = new Computer();\n    computer.gameboard.intialiseShips();\n    setAttackGameboard(computer.gameboard.getGameboard());\n\n    setStart(false);\n    setPlayerTurn(true);\n    setWinner(false);\n  };\n\n  const handleStartGame = () => {\n    setStart(true);\n  };\n\n  const handleRandomiseShips = () => {\n    player.gameboard.randomiseShips();\n    const updatedShips = _.cloneDeep(player.gameboard.getShips());\n    setShips(updatedShips);\n    setCurrentShip(player.gameboard.getShips()[0]);\n    setCurrentShipIndex(0);\n  };\n\n  const handleSetCurrentShip = (shipIndex) => {\n    const ship = player.gameboard.getShips()[shipIndex];\n    setCurrentShip(ship);\n    setCurrentShipIndex(shipIndex);\n  };\n\n  const handleMoveShip = (row, col) => {\n    if (player.gameboard.moveShip(row, col, currentShipIndex)) {\n      setShips(_.cloneDeep(player.gameboard.getShips()));\n      handleSetCurrentShip(currentShipIndex);\n      return true;\n    }\n    message.warning('Ships need to be surrounded by empty cells');\n    return false;\n  };\n\n  const handleToggleShip = () => {\n    if (player.gameboard.toggleShip(currentShipIndex)) {\n      setShips(_.cloneDeep(player.gameboard.getShips()));\n      handleSetCurrentShip(currentShipIndex);\n      return true;\n    }\n    message.warning('Ships need to be surrounded by empty cells');\n    return false;\n  };\n\n  const handlePlayerAttack = (col, row) => {\n    const result = player.attack(col, row, computer);\n    const updatedGameboard = _.cloneDeep(computer.gameboard.getGameboard());\n    setAttackGameboard(updatedGameboard);\n    if (result === 'HIT' || result === 'SUNK') {\n      if (computer.gameboard.gameover()) {\n        return setWinner('player');\n      }\n      return;\n    }\n    setPlayerTurn(false);\n    handleComputerAttack();\n    return;\n  };\n\n  const handleComputerAttack = () => {\n    const result = computer.attack(player);\n    const updatedGameboard = _.cloneDeep(player.gameboard.getGameboard());\n    setGameboard(updatedGameboard);\n    if (result !== 'MISS') {\n      if (player.gameboard.gameover()) {\n        return setWinner('computer');\n      }\n      return handleComputerAttack();\n    }\n    setPlayerTurn(true);\n    return;\n  };\n\n  useEffect(() => {\n    initialiseGame();\n  }, []);\n\n  return (\n    <Layout>\n      <StyledWrapper>\n        <Space direction=\"vertical\" size=\"large\" align=\"center\">\n          <Header\n            startGame={start}\n            playerTurn={playerTurn}\n            winner={winner}\n            currentShip={currentShip}\n            toggleShip={handleToggleShip}\n            moveShip={handleMoveShip}\n            setStartGame={handleStartGame}\n            randomiseShips={handleRandomiseShips}\n            playAgain={initialiseGame}\n          />\n          <Gameboards\n            startGame={start}\n            player={gameboard}\n            ships={ships}\n            currentShipIndex={currentShipIndex}\n            computer={attackGameboard}\n            setCurrentShip={handleSetCurrentShip}\n            attackComputer={handlePlayerAttack}\n            winner={winner}\n          />\n          <Footer />\n        </Space>\n      </StyledWrapper>\n    </Layout>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport Game from './Components/Game/Game';\nimport './App.less';\n\nconst App = () => {\n  return <Game />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}